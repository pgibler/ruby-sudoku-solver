#!ruby

# Require code
# ============

# Application allows us to run the program using the set configuration from the command line.
require_relative '../src/application'

# OptionParser gem for parsing options.
require 'optparse'

# Set up options
# ==============

# Set default options
provider_name = FileProvider::PROVIDER_NAME
solver_name = BacktrackingSolver::SOLVER_NAME

# Parse command line options using OptionParser.
opts = OptionParser.new do |opts|
  opts.banner = 'Usage: sudoku-solver'

  opts.on('-p', '--provider [NAME]', String, 'Sets the provider to be used for parsing and generating the solution.') do |name|
    provider_name = name
  end

  opts.on('-s', '--solver [NAME]', String, 'Sets the solver to be used for searching for a sudoku configuration from the board given by the provider.') do |name|
    solver_name = name
  end
end

opts.on_tail("-h", "--help",
             "Show this message") do
  puts opts
  exit
end

begin
  opts.parse!(ARGV)
rescue OptionParser::InvalidOption => e
  puts e
  puts opts
  exit(1)
end

# Invoke Application.run!
# =======================

# Run Application.run! and retrieve the resulting board_state.
board_state, result = Application.run!(
    provider_name: provider_name,
    solver_name: solver_name
)

# Report on the results
# =====================

if(!result) # If result is false, we failed.
  puts 'Could not find a sudoku configuration in the board.'
else # If 1result is true, we succeeded. Bam!
  puts 'We made it! Sudoku achieved!'
end

puts board_state.to_s